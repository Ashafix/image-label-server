{"version":3,"sources":["App.js","serviceWorker.js","index.js"],"names":["App","props","_this","Object","classCallCheck","this","possibleConstructorReturn","getPrototypeOf","call","state","error","isLoaded","response","_this$state","react_default","a","createElement","message","className","src","concat","image","onSubmit","sendLabel","noValidate","htmlFor","id","type","name","value","folder","hidden","file","options","labels","map","item","key","event","preventDefault","data","FormData","target","url","SERVER_URL","_iteratorNormalCompletion","_didIteratorError","_iteratorError","undefined","_step","_iterator","entries","Symbol","iterator","next","done","_ref","_ref2","slicedToArray","push","err","return","fetch","method","window","location","reload","_this2","then","res","json","result","setState","React","Component","Boolean","hostname","match","ReactDOM","render","src_App_0","document","getElementById","navigator","serviceWorker","ready","registration","unregister"],"mappings":"gOAuFeA,qBA/Eb,SAAAA,EAAYC,GAAO,IAAAC,EAAA,OAAAC,OAAAC,EAAA,EAAAD,CAAAE,KAAAL,IACjBE,EAAAC,OAAAG,EAAA,EAAAH,CAAAE,KAAAF,OAAAI,EAAA,EAAAJ,CAAAH,GAAAQ,KAAAH,KAAMJ,KACDQ,MAAQ,CACXC,MAAO,KACPC,UAAU,EACVC,SAAU,MALKV,wEASV,IAAAW,EAC+BR,KAAKI,MAAnCC,EADDG,EACCH,MAAOC,EADRE,EACQF,SAAUC,EADlBC,EACkBD,SACzB,OAAIF,EACKI,EAAAC,EAAAC,cAAA,qBAAaN,EAAMO,SAChBN,EAIR,CAACG,EAAAC,EAAAC,cAAA,OAAKE,UAAU,aAAaC,IAAG,yBAAAC,OAA4BR,EAASS,SACpEP,EAAAC,EAAAC,cAAA,QAAMM,SAAUjB,KAAKkB,UAAWC,YAAU,GACxCV,EAAAC,EAAAC,cAAA,SAAOS,QAAQ,WACfX,EAAAC,EAAAC,cAAA,SAAOU,GAAG,SAASC,KAAK,OAAOC,KAAK,SAASC,MAAOjB,EAASkB,OAAQC,QAAM,IAC3EjB,EAAAC,EAAAC,cAAA,SAAOS,QAAQ,SACfX,EAAAC,EAAAC,cAAA,SAAOW,KAAK,OAAOC,KAAK,OAAOC,MAAOjB,EAASoB,KAAMD,QAAM,IAC1DnB,EAASqB,QAAQC,OAAOC,IAAI,SAAAC,GAAI,MAC/B,CAACtB,EAAAC,EAAAC,cAAA,SAAOU,GAAIU,EAAMT,KAAK,WAAWC,KAAK,QAAQS,IAAKD,EAAMP,MAAOO,IAChEtB,EAAAC,EAAAC,cAAA,SAAOS,QAASW,GAAOA,GACvBtB,EAAAC,EAAAC,cAAA,cAGHF,EAAAC,EAAAC,cAAA,0BAfEF,EAAAC,EAAAC,cAAA,2DAsBDsB,GACRA,EAAMC,iBACN,IAAMC,EAAO,IAAIC,SAASH,EAAMI,QAC5BC,EAAMC,kCAENV,EAAS,GALEW,GAAA,EAAAC,GAAA,EAAAC,OAAAC,EAAA,IAMf,QAAAC,EAAAC,EAAyBV,EAAKW,UAA9BC,OAAAC,cAAAR,GAAAI,EAAAC,EAAAI,QAAAC,MAAAV,GAAA,EAAyC,KAAAW,EAAAP,EAAApB,MAAA4B,EAAAtD,OAAAuD,EAAA,EAAAvD,CAAAqD,EAAA,GAA/BnB,EAA+BoB,EAAA,GAA1B5B,EAA0B4B,EAAA,GAC5B,SAAPpB,EACFM,EAAMA,EAAMN,EAAM,IAAMR,EAAQ,IAEhCK,EAAOyB,KAAK9B,IAVD,MAAA+B,GAAAd,GAAA,EAAAC,EAAAa,EAAA,YAAAf,GAAA,MAAAK,EAAAW,QAAAX,EAAAW,SAAA,WAAAf,EAAA,MAAAC,GAcfJ,EAAMA,EAAM,UAAYT,EAExB4B,MAAMnB,EAAK,CACToB,OAAQ,QAGVC,OAAOC,SAASC,qDAGE,IAAAC,EAAA9D,KAClByD,MAAMlB,mCACHwB,KAAK,SAAAC,GAAG,OAAIA,EAAIC,SAChBF,KACC,SAACG,GACCJ,EAAKK,SAAS,CACZ7D,UAAU,EACVC,SAAU2D,KAGd,SAAC7D,GACCyD,EAAKK,SAAS,CACZ7D,UAAU,EACVD,mBA1EM+D,IAAMC,YCMJC,QACW,cAA7BX,OAAOC,SAASW,UAEe,UAA7BZ,OAAOC,SAASW,UAEhBZ,OAAOC,SAASW,SAASC,MACvB,2DCZNC,IAASC,OAAOjE,EAAAC,EAAAC,cAACgE,EAAD,MAASC,SAASC,eAAe,SD2H3C,kBAAmBC,WACrBA,UAAUC,cAAcC,MAAMjB,KAAK,SAAAkB,GACjCA,EAAaC","file":"static/js/main.3f37c711.chunk.js","sourcesContent":["import React from 'react';\nimport './App.css';\nimport ReactDOM from 'react-dom';\n\nconst SERVER_URL = 'http://localhost:5000';\n\nclass App extends React.Component {\n\n  constructor(props) {\n    super(props);\n    this.state = {\n      error: null,\n      isLoaded: false,\n      response: null\n    };\n  }\n\n  render() {\n    const { error, isLoaded, response } = this.state;\n    if (error) {\n      return <div>Error: {error.message}</div>;\n    } else if (!isLoaded) {\n      return <div>Loading...</div>;\n    } else {\n      return (\n        [<img className=\"center-fit\" src={`data:image/png;base64,${ response.image}`} />,\n         <form onSubmit={this.sendLabel} noValidate>\n           <label htmlFor=\"folder\"></label>\n           <input id=\"folder\" type=\"text\" name=\"folder\" value={response.folder} hidden/>\n           <label htmlFor=\"file\"></label>\n           <input type=\"text\" name=\"file\" value={response.file} hidden/>\n           {response.options.labels.map(item => (\n             [<input id={item} type=\"checkbox\" name=\"label\" key={item} value={item}/>,\n              <label htmlFor={item}>{item}</label>,\n              <br/>\n             ]\n           ))}\n           <button>Submit</button>\n         </form>\n        ]\n      );\n    }\n  }\n\n  sendLabel(event) {\n    event.preventDefault();\n    const data = new FormData(event.target);\n    var url = SERVER_URL + '/classify?';\n\n    var labels = [];\n    for (var [key, value] of data.entries()) {\n      if (key != 'label') {\n        url = url + key + '=' + value + '&';\n      } else {\n        labels.push(value)\n      }\n    }\n\n    url = url + '&label=' + labels;\n\n    fetch(url, {\n      method: 'GET'\n    });\n\n    window.location.reload();\n  }\n\n  componentDidMount() {\n    fetch(SERVER_URL + '/get_image')\n      .then(res => res.json())\n      .then(\n        (result) => {\n          this.setState({\n            isLoaded: true,\n            response: result\n          });\n        },\n        (error) => {\n          this.setState({\n            isLoaded: true,\n            error\n          });\n        }\n      )\n  }\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}